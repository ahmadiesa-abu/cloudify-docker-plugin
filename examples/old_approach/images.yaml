tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.6/types.yaml
  - https://raw.githubusercontent.com/ahmadiesa-abu/cloudify-docker-plugin/master/plugin.yaml

inputs:

  docker_host:
    type: string
    default: 10.239.2.253

  docker_user:
    type: string
    default: centos

  ansible_host:
    type: string
    default: 10.239.3.26

  ansible_user:
    type: string
    default: ubuntu

  playbook_path:
    type: string
    default: 'apache2/playbook.yaml'

  container_volume:
    description: volume that will be mapped to container
    type: string
    default: "/ansible-playbooks"

  ansible_version:
    description: Ansible version to prepare image for
    type: string
    default: "2.9.5"

  image_tag:
    description: Tag for the image to build
    type: string
    default: "ansible:"

dsl_definitions:

  docker_config: &docker_config
    docker_host: { get_input: docker_host }
    docker_rest_port: 2375

node_templates:

  docker_ansible_image:
    type: cloudify.nodes.docker.image
    properties:
      client_config: *docker_config
      resource_config:
        image_content:
          concat:
            - |
              FROM amd64/centos:7
              MAINTAINER Cosmo (hello@cloudify.co)
              RUN yum install -y openssh-server openssh-clients
              RUN curl "https://bootstrap.pypa.io/get-pip.py" -o "get-pip.py"
              RUN python get-pip.py
              RUN pip install --upgrade pip==9.0.1
            - |-
              RUN pip install ansible==
            - { get_input: ansible_version }
            - '\n'
            - |-
              WORKDIR
            - " "
            - { get_input: container_volume }
            - '\n'
            - |-
              VOLUME ["
            - { get_input: container_volume }
            - '"]'
        tag:
          concat:
            - { get_input: image_tag }
            - { get_input: ansible_version }

  ansible_hosts_file:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/handle_sources.py
          inputs: &ansible_host_var
            container_volume: { get_input: container_volume }
            ansible_host: { get_input: ansible_host }
            ansible_user: { get_input: ansible_user }
            ansible_ssh_private_key_file: { get_secret: ahmad_agent_key_private }
            ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
            ansible_become: True
          executor: central_deployment_agent
        delete:
          implementation: scripts/handle_sources.py
          inputs: *ansible_host_var
          executor: central_deployment_agent

  docker_ansible_container_files:
    type: cloudify.nodes.docker.container_files
    properties:
      resource_config:
        docker_ip: { get_input: docker_host }
        docker_user: { get_input: docker_user }
        docker_key: { get_secret: agent_key_private }
        source: https://github.com/ahmadiesa-abu/test-ansible-from-git.git
        destination: ""
        extra_files:
          - { get_attribute: [ansible_hosts_file, hosts_file] }
          - { get_attribute: [ansible_hosts_file, private_key] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: ansible_hosts_file

  docker_ansible_container:
    type: cloudify.nodes.docker.container
    properties:
      client_config: *docker_config
      resource_config:
        image_tag:
          concat:
            - { get_input: image_tag }
            - { get_input: ansible_version }
        container_args:
          command:
            concat :
              - 'ansible-playbook -i '
              - { get_input: container_volume }
              - '/hosts '
              - { get_input: container_volume }
              - '/'
              - { get_input: playbook_path }
          tty: False
          stdin_open: True
          environment:
            ANSIBLE_HOST_KEY_CHECKING: False
            ANSIBLE_INVALID_TASK_ATTRIBUTE_FAILED: False
          volumes:
            - { get_input: container_volume }
          volumes_mapping:
            - { get_attribute: [docker_ansible_container_files, destination] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: docker_ansible_image
      - type: cloudify.relationships.depends_on
        target: docker_ansible_container_files
      - type: cloudify.relationships.depends_on
        target: ansible_hosts_file


  docker_images_test:
    type: cloudify.nodes.docker.images
    properties:
      client_config: *docker_config
    relationships:
      - type: cloudify.relationships.depends_on
        target: docker_ansible_image

  docker_containers_test:
    type: cloudify.nodes.docker.containers
    properties:
      client_config: *docker_config
    relationships:
      - type: cloudify.relationships.depends_on
        target: docker_ansible_container
