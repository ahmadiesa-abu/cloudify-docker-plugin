tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://cloudify.co/spec/cloudify/5.0.5/types.yaml
  - plugin:cloudify-gcp-plugin?version= >=1.6.0
  - plugin:cloudify-utilities-plugin

inputs:

  region:
    type: string
    description: The GCP region to deploy the application in, such as europe-west1.
    default: 'europe-west1'

  zone:
    type: string
    description: The GCP zone to deploy the application in, such as europe-west1-b.
    default: 'europe-west1-b'

  network_name:
    type: string
    description: The name of your GCP Virtual Network.
    default: dockervnet

  subnet_name:
    type: string
    description: The name of your GCP Virtual Network.
    default: dockersubnet

  image:
    type: string
    description: OS image.
    default: https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-1404-trusty-v20170517

  instance_type:
    type: string
    description: A small GCP machine type.
    default: n1-standard-1

  agent_user:
    description: >
      The username of the agent running on the instance created from the image.
    default: 'ubuntu'

dsl_definitions:

  client_config: &gcp_config
    auth: { get_secret: gcp_credentials }
    zone: { get_input: zone }


node_templates:

  vm:
    type: cloudify.gcp.nodes.Instance
    properties:
      gcp_config: *gcp_config
      agent_config:
        install_method: none
        key: { get_secret: agent_key_private }
        user: { get_input: agent_user }
      use_public_ip: true
      image_id: { get_input: image }
      instance_type: { get_input: instance_type }
      zone: { get_input: zone }
      external_ip: true
      startup_script:
        runcmd:
          - curl -fsSL https://get.docker.com -o get-docker.sh; sh get-docker.sh
          - sed -i '/ExecStart/ s/$/ -H=tcp:\/\/0.0.0.0:2375/' /lib/systemd/system/docker.service
          - [ systemctl, daemon-reload ]
          - [ systemctl, restart, docker.service ]
    relationships:
    - type: cloudify.relationships.depends_on
      target: subnet
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/gcp/key.py
          executor: central_deployment_agent
          inputs:
            user: { get_input: agent_user }
            ssh_keys:
            - { get_secret: agent_key_public }

  firewall:
    type: cloudify.gcp.nodes.FirewallRule
    properties:
      gcp_config: *gcp_config
      allowed:
        tcp:
          - 22
          - 80
          - 2375
      sources:
        - 0.0.0.0/0
    relationships:
      - type: cloudify.relationships.connected_to
        target: network

  subnet:
    type: cloudify.gcp.nodes.SubNetwork
    properties:
      name: { get_input: subnet_name }
      region: { get_input: region }
      subnet: 10.11.12.0/22
      gcp_config: *gcp_config
    relationships:
    - type: cloudify.gcp.relationships.contained_in_network
      target: network

  network:
    type: cloudify.gcp.nodes.Network
    properties:
      name: { get_input: network_name }
      gcp_config: *gcp_config
      auto_subnets: false

outputs:

  application_endpoint:
    description: The external endpoint of the application.
    value: { concat: [ 'http://', { get_attribute: [ vm, ip ] }, ':2375' ] }
